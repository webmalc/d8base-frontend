{
  "root": true,
  "ignorePatterns": ["src/assets/**/*", "src/environments/**/*", "src/testing/**/*", "src/app/api/**/*", "src/*.ts"],
  "overrides": [
    {
      "files": ["*.ts"],
      "parserOptions": {
        "project": ["tsconfig.json", "e2e/tsconfig.json"],
        "createDefaultProgram": true
      },
      "extends": [
        "plugin:@angular-eslint/ng-cli-compat",
        "plugin:@angular-eslint/ng-cli-compat--formatting-add-on",
        "plugin:@angular-eslint/template/process-inline-templates"
      ],
      "plugins": [],
      "rules": {
        "@angular-eslint/component-class-suffix": [
          "error",
          {
            "suffixes": ["Page", "Component"]
          }
        ],
        "@angular-eslint/component-selector": [
          "error",
          {
            "prefix": "app",
            "style": "kebab-case"
          }
        ],
        "@angular-eslint/directive-selector": [
          "error",
          {
            "type": "attribute",
            "prefix": "app",
            "style": "camelCase"
          }
        ],
        "@angular-eslint/use-pipe-transform-interface": "off",
        "@typescript-eslint/explicit-member-accessibility": [
          "error",
          {
            "accessibility": "explicit",
            "overrides": {
              "constructors": "no-public"
            }
          }
        ],
        "@typescript-eslint/no-empty-function": "error",
        "@typescript-eslint/no-inferrable-types": [
          "off",
          {
            "ignoreParameters": true
          }
        ],
        "@typescript-eslint/no-this-alias": "error",
        "@typescript-eslint/no-var-requires": "error",
        "@typescript-eslint/prefer-readonly": "error",
        "@typescript-eslint/type-annotation-spacing": "off",
        "@typescript-eslint/ban-types": "off",
        "@typescript-eslint/naming-convention": [
          "error",
          {
            "selector": "default",
            "format": ["camelCase"],
            "leadingUnderscore": "forbid",
            "trailingUnderscore": "forbid"
          },
          {
            "selector": "memberLike",
            "format": [
              "camelCase",
              "snake_case",
              "PascalCase"
              // TODO fix the code and remove
            ],
            "leadingUnderscore": "allow"
          },
          {
            "selector": "typeLike",
            "format": ["PascalCase"]
          },
          {
            "selector": "variableLike",
            "format": ["camelCase", "snake_case", "UPPER_CASE"]
          }
        ],
        "@typescript-eslint/member-delimiter-style": "error",
        "@typescript-eslint/no-unused-expressions": "error",
        "@typescript-eslint/member-ordering": [
          "error",
          {
            "default": [
              "public-static-field",
              "protected-static-field",
              "private-static-field",
              "public-instance-field",
              "protected-instance-field",
              "private-instance-field",
              "public-constructor",
              "protected-constructor",
              "private-constructor",
              "public-static-method",
              "protected-static-method",
              "private-static-method",
              "public-instance-method",
              "protected-instance-method",
              "private-instance-method"
            ]
          }
        ],
        "@typescript-eslint/no-invalid-this": "off",
        // TODO consider initializing in constructor
        "@typescript-eslint/prefer-literal-enum-member": "error",
        "@typescript-eslint/explicit-function-return-type": [
          "error",
          {
            "allowExpressions": true,
            "allowTypedFunctionExpressions": true,
            "allowHigherOrderFunctions": true,
            "allowDirectConstAssertionInArrowFunctions": true,
            "allowConciseArrowFunctionExpressionsStartingWithVoid": false
          }
        ],
        "@typescript-eslint/quotes": [
          "error",
          "single",
          {
            "avoidEscape": true
          }
        ],
        "arrow-parens": ["off", "always"],
        "brace-style": ["off", "off"],
        "comma-dangle": ["error", "always-multiline"],
        "complexity": "error",
        "default-case": "error",
        "eol-last": "off",
        "eqeqeq": ["error", "always"],
        "import/order": "error",
        "linebreak-style": "off",
        "max-classes-per-file": ["error", 1],
        "max-lines": ["error", 300],
        "new-parens": "off",
        "newline-per-chained-call": "off",
        "no-duplicate-case": "error",
        "no-duplicate-imports": "error",
        "no-empty": "error",
        "no-extra-bind": "error",
        "no-extra-semi": "off",
        "no-invalid-this": "off",
        "no-irregular-whitespace": "error",
        "no-multiple-empty-lines": [
          "error",
          {
            "max": 2
          }
        ],
        "no-plusplus": [
          "error",
          {
            "allowForLoopAfterthoughts": true
          }
        ],
        "no-redeclare": "error",
        "no-template-curly-in-string": "error",
        "no-useless-constructor": "off",
        "no-shadow": "off",
        // TODO set to "error"? ts enums issue
        "one-var": ["off", "never"],
        "prefer-template": "error",
        "react/jsx-curly-spacing": "off",
        "react/jsx-equals-spacing": "off",
        "react/jsx-wrap-multilines": "off",
        "space-before-function-paren": "off",
        "space-in-parens": ["off", "never"],
        "no-underscore-dangle": "off",
        "prefer-arrow/prefer-arrow-functions": "off",
        "no-console": [
          "error",
          {
            "allow": ["warn", "error"]
          }
        ],
        "no-restricted-syntax": [
          "error",
          {
            "selector": "CallExpression[callee.name='fdescribe']",
            "message": "fdescribe is forbidden"
          },
          {
            "selector": "CallExpression[callee.name='fit']",
            "message": "fit is forbidden"
          }
        ]
      }
    },
    {
      "files": ["*.html"],
      "extends": ["plugin:@angular-eslint/template/recommended"],
      "rules": {}
    }
  ]
}
